


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ;*******************************************************
                       *************************************************
    3 00000000         ;                                                uC/OS-I
                       I
    4 00000000         ;                                          The Real-Time
                        Kernel
    5 00000000         ;
    6 00000000         ;
    7 00000000         ;                              (c) Copyright 2010; Micri
                       um, Inc.; Weston, FL
    8 00000000         ;                    All rights reserved.  Protected by 
                       international copyright laws.
    9 00000000         ;
   10 00000000         ;                                           ARM Cortex-M
                       4 Port
   11 00000000         ;
   12 00000000         ; File      : OS_CPU_A.ASM
   13 00000000         ; Version   : V2.92
   14 00000000         ; By        : JJL
   15 00000000         ;             BAN
   16 00000000         ;
   17 00000000         ; For       : ARMv7 Cortex-M4
   18 00000000         ; Mode      : Thumb-2 ISA
   19 00000000         ; Toolchain : RealView Development Suite
   20 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   21 00000000         ;             ARM Developer Suite (ADS)
   22 00000000         ;             Keil uVision
   23 00000000         ;*******************************************************
                       *************************************************
   24 00000000         ;
   25 00000000         
   26 00000000         ;*******************************************************
                       *************************************************
   27 00000000         ;                                          PUBLIC FUNCTI
                       ONS
   28 00000000         ;*******************************************************
                       *************************************************
   29 00000000         
   30 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   31 00000000                 EXTERN           OSPrioCur
   32 00000000                 EXTERN           OSPrioHighRdy
   33 00000000                 EXTERN           OSTCBCur
   34 00000000                 EXTERN           OSTCBHighRdy
   35 00000000                 EXTERN           OSIntExit
   36 00000000                 EXTERN           OSTaskSwHook
   37 00000000                 EXTERN           OS_CPU_ExceptStkBase
   38 00000000         
   39 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   40 00000000                 EXPORT           OS_CPU_SR_Restore
   41 00000000                 EXPORT           OSStartHighRdy
   42 00000000                 EXPORT           OSCtxSw
   43 00000000                 EXPORT           OSIntCtxSw
   44 00000000                 EXPORT           PendSV_Handler ;Ë¬ ÐèÒª¶¼±ä³ÉPe
                                                            ndSV_HandlerÕâ¸öÃû 
                                                            ÒòÎªÖÐ¶ÏÏòÁ¿±íÖÐÊÇÕ



ARM Macro Assembler    Page 2 


                                                            â¸öÃû
   45 00000000         
   46 00000000         ;PAGE
   47 00000000         ;*******************************************************
                       *************************************************
   48 00000000         ;                                               EQUATES
   49 00000000         ;*******************************************************
                       *************************************************
   50 00000000         
   51 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   52 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   53 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   54 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   55 00000000         
   56 00000000         
   57 00000000         ;*******************************************************
                       *************************************************
   58 00000000         ;                                     CODE GENERATION DI
                       RECTIVES
   59 00000000         ;*******************************************************
                       *************************************************
   60 00000000         
   61 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   62 00000000                 THUMB
   63 00000000                 REQUIRE8
   64 00000000                 PRESERVE8
   65 00000000         
   66 00000000         ;*******************************************************
                       *************************************************
   67 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
   68 00000000         ;
   69 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   70 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   71 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   72 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   73 00000000         ;              into the CPU's status register.
   74 00000000         ;
   75 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   76 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);



ARM Macro Assembler    Page 3 


   77 00000000         ;
   78 00000000         ;
   79 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
   80 00000000         ;
   81 00000000         ;                 void Task (void *p_arg)
   82 00000000         ;                 {
   83 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
   84 00000000         ;                     OS_CPU_SR  cpu_sr;
   85 00000000         ;                 #endif
   86 00000000         ;
   87 00000000         ;                          :
   88 00000000         ;                          :
   89 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
   90 00000000         ;                          :
   91 00000000         ;                          :
   92 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
   93 00000000         ;                          :
   94 00000000         ;                          :
   95 00000000         ;                 }
   96 00000000         ;*******************************************************
                       *************************************************
   97 00000000         
   98 00000000         OS_CPU_SR_Save
   99 00000000 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
  100 00000004 B672            CPSID            I
  101 00000006 4770            BX               LR
  102 00000008         
  103 00000008         OS_CPU_SR_Restore
  104 00000008 F380 8810       MSR              PRIMASK, R0
  105 0000000C 4770            BX               LR
  106 0000000E         
  107 0000000E         ;PAGE
  108 0000000E         ;*******************************************************
                       *************************************************
  109 0000000E         ;                                         START MULTITAS
                       KING
  110 0000000E         ;                                      void OSStartHighR
                       dy(void)
  111 0000000E         ;
  112 0000000E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  113 0000000E         ;              the first task to start.
  114 0000000E         ;
  115 0000000E         ;           2) OSStartHighRdy() MUST:
  116 0000000E         ;              a) Setup PendSV exception priority to low
                       est;
  117 0000000E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  118 0000000E         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base
  119 0000000E         ;              d) Set OSRunning to TRUE;
  120 0000000E         ;              e) Trigger PendSV exception;
  121 0000000E         ;              f) Enable interrupts (tasks will run with



ARM Macro Assembler    Page 4 


                        interrupts enabled).
  122 0000000E         ;*******************************************************
                       *************************************************
  123 0000000E         
  124 0000000E         OSStartHighRdy
  125 0000000E 4825            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  126 00000010 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
  127 00000014 7001            STRB             R1, [R0]
  128 00000016         
  129 00000016 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  130 00000018 F380 8809       MSR              PSP, R0
  131 0000001C         
  132 0000001C 4822            LDR              R0, =OS_CPU_ExceptStkBase ; Ini
                                                            tialize the MSP to 
                                                            the OS_CPU_ExceptSt
                                                            kBase
  133 0000001E 6801            LDR              R1, [R0]
  134 00000020 F381 8808       MSR              MSP, R1
  135 00000024         
  136 00000024 4821            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  137 00000026 2101            MOVS             R1, #1
  138 00000028 7001            STRB             R1, [R0]
  139 0000002A         
  140 0000002A 4821            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  141 0000002C F04F 5180       LDR              R1, =NVIC_PENDSVSET
  142 00000030 6001            STR              R1, [R0]
  143 00000032         
  144 00000032 B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  145 00000034         
  146 00000034         OSStartHang
  147 00000034 E7FE            B                OSStartHang ; Should never get 
                                                            here
  148 00000036         
  149 00000036         
  150 00000036         ;PAGE
  151 00000036         ;*******************************************************
                       *************************************************
  152 00000036         ;                       PERFORM A CONTEXT SWITCH (From t
                       ask level) - OSCtxSw()
  153 00000036         ;
  154 00000036         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  155 00000036         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  156 00000036         ;*******************************************************
                       *************************************************
  157 00000036         
  158 00000036         OSCtxSw
  159 00000036 481E            LDR              R0, =NVIC_INT_CTRL ; Trigger th



ARM Macro Assembler    Page 5 


                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  160 00000038 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  161 0000003C 6001            STR              R1, [R0]
  162 0000003E 4770            BX               LR
  163 00000040         
  164 00000040         
  165 00000040         ;PAGE
  166 00000040         ;*******************************************************
                       *************************************************
  167 00000040         ;                   PERFORM A CONTEXT SWITCH (From inter
                       rupt level) - OSIntCtxSw()
  168 00000040         ;
  169 00000040         ; Note(s) : 1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  170 00000040         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  171 00000040         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  172 00000040         ;*******************************************************
                       *************************************************
  173 00000040         
  174 00000040         OSIntCtxSw
  175 00000040 481B            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  176 00000042 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  177 00000046 6001            STR              R1, [R0]
  178 00000048 4770            BX               LR
  179 0000004A         
  180 0000004A         
  181 0000004A         ;PAGE
  182 0000004A         ;*******************************************************
                       *************************************************
  183 0000004A         ;                                       HANDLE PendSV EX
                       CEPTION
  184 0000004A         ;                                   void OS_CPU_PendSVHa
                       ndler(void)
  185 0000004A         ;
  186 0000004A         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  187 0000004A         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  188 0000004A         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  189 0000004A         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  190 0000004A         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  191 0000004A         ;              a thread or occurs due to an interrupt or
                        exception.
  192 0000004A         ;
  193 0000004A         ;           2) Pseudo-code is:
  194 0000004A         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  195 0000004A         ;              b) Save remaining regs r4-r11 on process 
                       stack;



ARM Macro Assembler    Page 6 


  196 0000004A         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  197 0000004A         ;              d) Call OSTaskSwHook();
  198 0000004A         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  199 0000004A         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  200 0000004A         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  201 0000004A         ;              h) Restore R4-R11 from new process stack;
                       
  202 0000004A         ;              i) Perform exception return which will re
                       store remaining context.
  203 0000004A         ;
  204 0000004A         ;           3) On entry into PendSV handler:
  205 0000004A         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  206 0000004A         ;                 xPSR, PC, LR, R12, R0-R3
  207 0000004A         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  208 0000004A         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  209 0000004A         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  210 0000004A         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  211 0000004A         ;
  212 0000004A         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  213 0000004A         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  214 0000004A         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  215 0000004A         ;*******************************************************
                       *************************************************
  216 0000004A         
  217 0000004A         PendSV_Handler
  218 0000004A B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  219 0000004C F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  220 00000050 B150            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ; Skip register sav
                                                            e the first time
  221 00000052         
  222 00000052         
  223 00000052 F1A0 0020       SUB              R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  224 00000056 E880 0FF0       STM              R0, {R4-R11}
  225 0000005A F1A0 0040       SUB              R0, R0, #0X40
  226 0000005E EC80 8B10       VSTM             R0, {D8-D15}
  227 00000062         
  228 00000062 4914            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  229 00000064 6809            LDR              R1, [R1]
  230 00000066 6008            STR              R0, [R1]    ; R0 is SP of proce



ARM Macro Assembler    Page 7 


                                                            ss being switched o
                                                            ut
  231 00000068         
  232 00000068         ; At this point, entire context of process has been save
                       d
  233 00000068         OS_CPU_PendSVHandler_nosave
  234 00000068 B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  235 0000006A 4813            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  236 0000006C 4780            BLX              R0
  237 0000006E F85D EB04       POP              {R14}
  238 00000072         
  239 00000072 4812            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  240 00000074 4912            LDR              R1, =OSPrioHighRdy
  241 00000076 780A            LDRB             R2, [R1]
  242 00000078 7002            STRB             R2, [R0]
  243 0000007A         
  244 0000007A 480E            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  245 0000007C 4911            LDR              R1, =OSTCBHighRdy
  246 0000007E 680A            LDR              R2, [R1]
  247 00000080 6002            STR              R2, [R0]
  248 00000082         
  249 00000082 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  250 00000084         
  251 00000084 EC90 8B10       VLDM             R0,  {D8-D15}
  252 00000088 F100 0040       ADD              R0,  R0, #0X40
  253 0000008C E890 0FF0       LDM              R0,  {R4-R11}
  254 00000090 F100 0020       ADD              R0,  R0, #0X20
  255 00000094         
  256 00000094 F02E 0E10       BIC.W            LR, LR, #0x10 ; Set exception r
                                                            eturn uses floating
                                                            -point state
  257 00000098         
  258 00000098 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  259 0000009C F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  260 000000A0 B662            CPSIE            I
  261 000000A2 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  262 000000A4         
  263 000000A4                 END
              E000ED22 
              00000000 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\OBJ



ARM Macro Assembler    Page 8 


\os_cpu_a.d -o.\OBJ\os_cpu_a.o -ID:\Keil4.70a\ARM\RV31\INC -ID:\Keil4.70a\ARM\C
MSIS\Include -ID:\Keil4.70a\ARM\Inc\ST\STM32F4xx --predefine="__MICROLIB SETA 1
" --list=.\List\os_cpu_a.lst ..\uCOSII\Ports\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 61 in file ..\uCOSII\Ports\os_cpu_a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 00000036

Symbol: OSCtxSw
   Definitions
      At line 158 in file ..\uCOSII\Ports\os_cpu_a.asm
   Uses
      At line 42 in file ..\uCOSII\Ports\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 00000040

Symbol: OSIntCtxSw
   Definitions
      At line 174 in file ..\uCOSII\Ports\os_cpu_a.asm
   Uses
      At line 43 in file ..\uCOSII\Ports\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 00000034

Symbol: OSStartHang
   Definitions
      At line 146 in file ..\uCOSII\Ports\os_cpu_a.asm
   Uses
      At line 147 in file ..\uCOSII\Ports\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 124 in file ..\uCOSII\Ports\os_cpu_a.asm
   Uses
      At line 41 in file ..\uCOSII\Ports\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_PendSVHandler_nosave 00000068

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 233 in file ..\uCOSII\Ports\os_cpu_a.asm
   Uses
      At line 220 in file ..\uCOSII\Ports\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore
   Definitions
      At line 103 in file ..\uCOSII\Ports\os_cpu_a.asm
   Uses
      At line 40 in file ..\uCOSII\Ports\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 98 in file ..\uCOSII\Ports\os_cpu_a.asm
   Uses
      At line 39 in file ..\uCOSII\Ports\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
PendSV_Handler 0000004A

Symbol: PendSV_Handler
   Definitions
      At line 217 in file ..\uCOSII\Ports\os_cpu_a.asm
   Uses
      At line 44 in file ..\uCOSII\Ports\os_cpu_a.asm
Comment: PendSV_Handler used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 51 in file ..\uCOSII\Ports\os_cpu_a.asm
   Uses
      At line 140 in file ..\uCOSII\Ports\os_cpu_a.asm
      At line 159 in file ..\uCOSII\Ports\os_cpu_a.asm
      At line 175 in file ..\uCOSII\Ports\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 54 in file ..\uCOSII\Ports\os_cpu_a.asm
   Uses
      At line 141 in file ..\uCOSII\Ports\os_cpu_a.asm
      At line 160 in file ..\uCOSII\Ports\os_cpu_a.asm
      At line 176 in file ..\uCOSII\Ports\os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 53 in file ..\uCOSII\Ports\os_cpu_a.asm
   Uses
      At line 126 in file ..\uCOSII\Ports\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 52 in file ..\uCOSII\Ports\os_cpu_a.asm
   Uses
      At line 125 in file ..\uCOSII\Ports\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 35 in file ..\uCOSII\Ports\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 31 in file ..\uCOSII\Ports\os_cpu_a.asm
   Uses
      At line 239 in file ..\uCOSII\Ports\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 32 in file ..\uCOSII\Ports\os_cpu_a.asm
   Uses
      At line 240 in file ..\uCOSII\Ports\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 30 in file ..\uCOSII\Ports\os_cpu_a.asm
   Uses
      At line 136 in file ..\uCOSII\Ports\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 33 in file ..\uCOSII\Ports\os_cpu_a.asm
   Uses
      At line 228 in file ..\uCOSII\Ports\os_cpu_a.asm
      At line 244 in file ..\uCOSII\Ports\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 34 in file ..\uCOSII\Ports\os_cpu_a.asm
   Uses
      At line 245 in file ..\uCOSII\Ports\os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 36 in file ..\uCOSII\Ports\os_cpu_a.asm
   Uses
      At line 235 in file ..\uCOSII\Ports\os_cpu_a.asm
Comment: OSTaskSwHook used once
OS_CPU_ExceptStkBase 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 37 in file ..\uCOSII\Ports\os_cpu_a.asm
   Uses
      At line 132 in file ..\uCOSII\Ports\os_cpu_a.asm
Comment: OS_CPU_ExceptStkBase used once
8 symbols
355 symbols in table
